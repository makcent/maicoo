<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.makcent.dao.QuestionRewardMapper" >
  <resultMap id="BaseResultMap" type="com.makcent.pojo.QuestionReward" >
    <constructor >
      <idArg column="reward_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <idArg column="member_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="created_at" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="updated_at" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="status" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="question_id" jdbcType="BIGINT" javaType="java.lang.Long" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    reward_id, member_id, money, created_at, updated_at, status, question_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.makcent.pojo.QuestionRewardKey" >
    select 
    <include refid="Base_Column_List" />
    from question_reward
    where reward_id = #{rewardId,jdbcType=BIGINT}
      and member_id = #{memberId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.makcent.pojo.QuestionRewardKey" >
    delete from question_reward
    where reward_id = #{rewardId,jdbcType=BIGINT}
      and member_id = #{memberId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.makcent.pojo.QuestionReward" >
    insert into question_reward (reward_id, member_id, money, 
      created_at, updated_at, status, 
      question_id)
    values (#{rewardId,jdbcType=BIGINT}, #{memberId,jdbcType=BIGINT}, #{money,jdbcType=DECIMAL}, 
      now(), now(), #{status,jdbcType=TINYINT},
      #{questionId,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.makcent.pojo.QuestionReward" >
    insert into question_reward
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="rewardId != null" >
        reward_id,
      </if>
      <if test="memberId != null" >
        member_id,
      </if>
      <if test="money != null" >
        money,
      </if>
      <if test="createdAt != null" >
        created_at,
      </if>
      <if test="updatedAt != null" >
        updated_at,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="questionId != null" >
        question_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="rewardId != null" >
        #{rewardId,jdbcType=BIGINT},
      </if>
      <if test="memberId != null" >
        #{memberId,jdbcType=BIGINT},
      </if>
      <if test="money != null" >
        #{money,jdbcType=DECIMAL},
      </if>
      <if test="createdAt != null" >
        now(),
      </if>
      <if test="updatedAt != null" >
        now(),
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="questionId != null" >
        #{questionId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.makcent.pojo.QuestionReward" >
    update question_reward
    <set >
      <if test="money != null" >
        money = #{money,jdbcType=DECIMAL},
      </if>
      <if test="createdAt != null" >
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        updated_at = now(),
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="questionId != null" >
        question_id = #{questionId,jdbcType=BIGINT},
      </if>
    </set>
    where reward_id = #{rewardId,jdbcType=BIGINT}
      and member_id = #{memberId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.makcent.pojo.QuestionReward" >
    update question_reward
    set money = #{money,jdbcType=DECIMAL},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = now(),
      status = #{status,jdbcType=TINYINT},
      question_id = #{questionId,jdbcType=BIGINT}
    where reward_id = #{rewardId,jdbcType=BIGINT}
      and member_id = #{memberId,jdbcType=BIGINT}
  </update>
</mapper>